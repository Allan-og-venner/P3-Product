"use client"

import React from 'react';
import Link from 'next/link';
import { useState } from 'react';
import { ZodError } from 'zod';
import { loginFormSchema } from '../lib/validations/loginForm';
import { useRouter } from 'next/navigation';
import z from 'zod';
import { LoginException } from '../exceptions/LoginException';


export default function loginPage() {
  const router = useRouter();



  const [formData, setFormData] = useState({
    username: '',
    password: '',
  }) 

  const initialValidationErrors: z.infer<typeof loginFormSchema> = {
    username: '',
    password: '',
  };
  
  const [validationErrors, setValidationErrors] = useState(initialValidationErrors);

  const handleChange = (e:any) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value
    })
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()
    console.log(formData)

    
    //Const Username and password is matched with the fields in the form Schema. 
    try {

      setValidationErrors(initialValidationErrors);
      console.log(validationErrors)
      const validatedData = loginFormSchema.parse(formData)
      // We send the validated data to the an API endpoint
      // on the server; we will code this later.

       const response = await fetch("/api/login", {
        method: "POST",
        body: JSON.stringify(validatedData),
      })
        
          if (response.ok) { 
            // Request was successful
            //router.push('/login');
            const { token } = await response.json()
            document.cookie = `token=${token}; path=/`;
            router.push("/leaderHome");
         

          } else if(response.status === 409){
            let a = new LoginException;
            setValidationErrors({...validationErrors, password:  a.message, username: ''})
          }
         
    
    } catch (err: any) {
        
      
        if (err instanceof z.ZodError) {
        // Handle validation errors
        const newValidationErrors: z.infer<typeof loginFormSchema> = { ...initialValidationErrors };


        err.errors.forEach((validationError) => {
          // Extract the field name and error message from the validationError.
          const fieldName = validationError.path[0] as keyof z.infer<typeof loginFormSchema>;
          const errorMessage = validationError.message;

          // Update the corresponding field in the newValidationErrors object.
          newValidationErrors[fieldName] = errorMessage;
        });

        // Update the validationErrors state with the new errors.
        setValidationErrors(newValidationErrors);
       
      }

      if(err === 409){

        let a = new LoginException;
        setValidationErrors({...validationErrors, password:  a.message})
      }

      console.log(err)
      

      }
  }
  

  return (
    <div className="relative flex flex-col items-center justify-center min-h-screen overflow-hidden">
      <div className="w-full p-6 bg-white rounded-md shadow-md lg:max-w-xl">
        <h1 className="text-3xl font-bold text-center text-gray-700">Login</h1>
        <p></p>
        <form className="mt-6" onSubmit={handleSubmit}>
          <div className="mb-4">
            <label htmlFor="username" className="block text-sm font-semibold text-gray-800">
              Username
            </label>
            <input
              type="text" id="username" autoComplete="username" onChange={handleChange} name='username'
              className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-gray-400 focus:ring-gray-300 focus:outline-none focus:ring focus:ring-opacity-40"
            />
            {validationErrors.username && (
              <div 
                className="text-red-500 text-sm">
                {validationErrors.username}
              </div>
            )}
          </div>
          <div className="mb-2">
            <label htmlFor="password" className="block text-sm font-semibold text-gray-800">
              Password
            </label>
            <input
              type="password" id="password" autoComplete="current-password" onChange={handleChange} name='password'
              className="block w-full px-4 py-2 mt-2 text-gray-700 bg-white border rounded-md focus:border-gray-400 focus:ring-gray-300 focus:outline-none focus:ring focus:ring-opacity-40"
            />
            {validationErrors.password && (
              <div 
                className="text-red-500 text-sm">
                {validationErrors.password}
              </div>
            )}
          </div>
          <div className="mt-2">
            <button type="submit" className="w-full px-4 py-2 tracking-wide text-white transition-colors duration-200 transform bg-gray-700 rounded-md hover:bg-gray-600 focus:outline-none focus:bg-gray-600 hover:scale-105" >
              Login
            </button>
          </div>
        </form>

        <p className="mt-4 text-sm text-center text-gray-700">
          Don't have an account?{" "}
          <Link href="/register" className="font-medium text-blue-600 hover:underline">
            Sign up
          </Link>
        </p>
      </div>
    </div>
  );
}
